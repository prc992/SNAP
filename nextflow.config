// Centralized configuration for shared parameters
params {
    genome = 'hg19'
    report_peak_genomic_annotation = false
    exclude_dac_regions = true
    deduped_bam = false
    outputFolder = "analysis_folder"
    until = "BAM_SIGNAL_PROCESSING"
    sample_control = ''
    no_enrichment_mark = 'no_enrichment_mark'
    enrichment_mark = 'no_enrichment_mark'
    samplesheetBams = null
    sample_dir_bam = null
    samplesheetfasta = null
    sample_dir_fasta = null
    read_method = 'PE' // Pair-End reads

    // Erase the working directory after the pipeline execution, this will save space 
    // but you will not be able to check the intermediate files
    //cleanup = true

    nmer = 4 // Number of bases to use for motif analysis

    genomeInfoPaths = "${projectDir}/ref_files/genome/genome_paths.csv"
    enrichment_states_ref = "${projectDir}/ref_files/enrichment_states"
    enrichment_states_colors = "${projectDir}/ref_files/enrichment_states/EnrichmentColors.txt"
    fragle_sites_ref = "${projectDir}/ref_files/fragle_sites"
    genes_pileup_report = "${projectDir}/ref_files/pileup_report/regions_of_interest.bed"
    multiqc_config_with_peak_annotation = "${projectDir}/ref_files/multiqc/config_with_peak_annotation/multiqc_config.yml"
    multiqc_config_no_peak_annotation = "${projectDir}/ref_files/multiqc/config_no_peak_annotation/multiqc_config.yml"
    dummy_control_file = "${projectDir}/ref_files/dummy_file/dummy.txt"
    dummy_control_file_name = "dummy.txt"
    multiqc_housekeeping_report = "${projectDir}/ref_files/multiqc/igv_housekeeping_genes_mqc.html"
    multiqc_housekeeping_header = "${projectDir}/ref_files/multiqc/igv_housekeeping_header.html"
    multiqc_frag_len_header = "${projectDir}/ref_files/multiqc/frag_len_header.txt"
    multiqc_tot_frag_header = "${projectDir}/ref_files/multiqc/frags_header.txt"
    multiqc_tot_peaks_header = "${projectDir}/ref_files/multiqc/peaks_header.txt"
    multiqc_tot_ct_header = "${projectDir}/ref_files/multiqc/ct_header.txt"
    multiqc_enrichment_header = "${projectDir}/ref_files/multiqc/enrichment_header.txt"
    multiqc_signal_header = "${projectDir}/ref_files/multiqc/signal_header.txt"

    // Reference files for signal intensity calculations
    regions_of_interest_MEDIP_signal = "${projectDir}/ref_files/signal_intesity/sitesofinterest_MEDIP.bed"
    regions_of_interest_MARKS_signal = "${projectDir}/ref_files/signal_intesity/sitesofinterest_H3K4ME3andH3K27AC.bed"
    housekeeping_MEDIP_signal = "${projectDir}/ref_files/signal_intesity/housekeeping_MEDIP.bed"
    housekeeping_H3K4ME3_signal = "${projectDir}/ref_files/signal_intesity/housekeeping_H3K4ME3.bed"
    housekeeping_H3K27AC_signal = "${projectDir}/ref_files/signal_intesity/housekeeping_H3K27AC.bed"

    pathEnrichmentScript = "${projectDir}/auxiliar_programs/enrichment.sh"
    pathRfrag_plotFragDist = "${projectDir}/auxiliar_programs/frag_plotFragDist.R"
    pathRComparison = "${projectDir}/auxiliar_programs/pileups_comparison.R"
    pathRPileups = "${projectDir}/auxiliar_programs/read_pileups.R"
    pathRGenomicAnnotation = "${projectDir}/auxiliar_programs/genomic_annotation.R"

    // Program files for signal intensity calculations
    pathRMEDIPSignalCalculation = "${projectDir}/auxiliar_programs/medip_signal_intesity.r"
    pathRMARKSSignalCalculation = "${projectDir}/auxiliar_programs/mark_signal_intesity.r"

    pathSNPSMaSH = "${projectDir}/auxiliar_programs/SMaSH.py"
    pathSNPSMaSHPlot = "${projectDir}/auxiliar_programs/SNPFingerprintPlot.py"
    pathReportFragHist = "${projectDir}/auxiliar_programs/report_calc_frag_hist.py"
    pathReportFrags = "${projectDir}/auxiliar_programs/report_frags.py"
    pathReportPeaks = "${projectDir}/auxiliar_programs/report_peaks.py"
    pathReportCT = "${projectDir}/auxiliar_programs/report_ct_fragle.py"
    pathReportEnrichment = "${projectDir}/auxiliar_programs/report_enrichment.py"
    pathReportQualityLite = "${projectDir}/auxiliar_programs/report_quality_lite.py"
    pathMergeReportEnrichment = "${projectDir}/auxiliar_programs/merge_enrichment_reports.py"
    pathMergeReportSignal = "${projectDir}/auxiliar_programs/merge_signal_reports.py"
    pathIGVFilestoSessions = "${projectDir}/auxiliar_programs/igv_files_to_session.py"

    filter_samtools_pe_params = "-f 3 -F 3844 -q 30"
    filter_samtools_se_params = "-F 3844 -q 30"
    trimming_params = "--q 20"
    trimming_params_fastp = "--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"
    bwa_params = "-I 250,200,2000,10"

    containers {
        multiqc = 'quay.io/biocontainers/multiqc:1.25.2--pyhdfd78af_0'
        wget = "quay.io/biocontainers/wget:1.21.4"
        bwa = "quay.io/biocontainers/bwa:0.7.18--he4a0461_1"
        samtools = "quay.io/biocontainers/samtools:1.15.1--h1170115_0"
        bwa_and_samtools = "quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0"
        preseq = "quay.io/biocontainers/preseq:2.0.2--gsl1.16_0"
        deeptools = "mgibio/deeptools:3.5.3"
        python = "quay.io/biocontainers/mulled-v2-f42a44964bca5225c7860882e231a7b5488b5485:47ef981087c59f79fdbcab4d9d7316e9ac2e688d-0"
        bedtools = "quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0"
        igv_reports = "staphb/igv-reports:1.12.0"
        picard = "quay.io/biocontainers/picard:2.27.4--hdfd78af_0"
        fastqc = "quay.io/biocontainers/fastqc:0.11.9--0"
        ucsc_fetchchromsizes = "quay.io/biocontainers/ucsc-fetchchromsizes:377--ha8a8165_3"
        r_data_analysis = "pegi3s/r_data-analysis:4.1.1_v3"
        r_signal_intensity = "prc992/snap_signal_intensity:v1.0"
        macs2 = "quay.io/biocontainers/macs2:2.2.7.1--py38h4a8c8d9_3"
        bcftools = "quay.io/biocontainers/bcftools:1.21--h3a4d415_1"
        snp_dendrogram = "prc992/snp_dendrogram:v1.3"
        trim_galore = "quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0"
        ubuntu = "ubuntu:noble-20231221"
        igv = "wgspipeline/igvtools:v0.0.1"
        bedgraphtobigwig="4dndcic/4dn-bedgraphtobigwig:v6"
        bedgraphtobigwig_version = "445" // WARN: Version information not provided by tool on CLI. Please update version string below when bumping container versions.
        snp_smash_plot = "prc992/snp_smash_plot:v1.2"
        snap_genomic_annotation = "prc992/snap_genomic_annotation:v1.0"
        fragle = "prc992/snap-fragle:v1"
        fastp = "staphb/fastp:1.0.1"
        chromatin_count_normalization = "chhetribsurya/chromatin-frags-norm:v1.1"
    }
}

// Profile-specific settings
profiles {

    end_motif_analysis {
        params.until = "FRAGMENTS_PROCESSING"
        params.trimming_params = "--q 0"
        params.read_method = "PE"
        params.bwa_params = "-I 250,200,2000,10"
    }

    cf_chipseq_analysis {
        params.until = "BAM_SIGNAL_PROCESSING"
        params.trimming_params = "--q 20"
        params.bwa_params = "-I 250,200,2000,10"
    }

    singularity_high_eris {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "$PWD/Sing-Images/"
        process.executor = 'slurm'

        includeConfig 'conf/singularity_high_eris.config'
    }

    singularity_high_eris_deep {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "$PWD/Sing-Images/"
        process.executor = 'slurm'

        includeConfig 'conf/singularity_high_eris_deep.config'
    }

    singularity_high_o2 {
        singularity.enabled = true
        singularity.autoMounts = true
        process.executor = 'slurm'

        includeConfig 'conf/singularity_high_o2.config'
    }


    docker_light_macos {
        docker.enabled = true
        docker.runOptions = '--platform linux/amd64'

        includeConfig 'conf/docker_light_macos.config'
    }

    docker_high_aws {
        docker.enabled = true
        docker.userEmulation = true
        docker.runOptions = '--platform linux/amd64'

        includeConfig 'conf/docker_high_aws.config'

        // Override S3-specific parameters
        params {
            align_ref = 's3://dfci-cfchipseq-tower/ref_files/hg19/'
            files_ref_genome = 's3://dfci-cfchipseq-tower/ref_files/hg19/hg19*.*'
            gtf_ref = 's3://dfci-cfchipseq-tower/ref_files/hg19/gencode.v19.annotation.gtf'
            DAC_Exclusion = 's3://dfci-cfchipseq-tower/ref_files/hg19/DAC_Exclusion.bed'
        }
    }
}